# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
GET         /                                                    controllers.HomeController.helloWorld()
GET         /uploads/*file                                       controllers.Assets.at(path = "/public/uploads", file)

## Users
# Create user
POST        /api/users                                           controllers.UserController.create()
# Returns user by name
GET         /api/users/:name                                     controllers.UserController.getByName(name)
GET         /api/users                                           controllers.UserController.getAllUsers()
POST        /api/profile                                         controllers.HomeController.updateProfileAPI()
# Reset password for a user
GET         /api/resetpassword                                   controllers.UserController.resetPassword(name: java.lang.String ?= null)
POST        /api/resetpassword                                   controllers.UserController.resetPasswordVerifyAPI()

## Papers
# get paper info by paper id
GET         /api/papers/:id                                      controllers.PaperController.getPaper(id: Long)
# get authors for paper id
GET         /api/papers/authors/:id                              controllers.PaperController.getAuthors(id: Long)
# get all papers or papers for user_id
GET         /api/papers                                          controllers.PaperController.getAllPapers()
# get all papers for user_id and conf_id
GET         /api/papers/:uid/conf/:cid                           controllers.PaperController.getPapersByConf(uid:Long, cid: Int)
POST        /api/papers/upload/:id                               controllers.PaperController.uploadPaper(id: Long)
GET         /api/papers/download                                 controllers.PaperController.downloadPaper(id: Long)
# paper submission
POST        /api/paper                                           controllers.PaperController.create()
POST        /api/paper/:id                                       controllers.PaperController.update(id: Long)

# Reviews
# create
POST        /api/reviews                                         controllers.ReviewController.create()
# get by id
GET         /api/reviews/:id                                     controllers.ReviewController.getById(id: Long)
# get reviews by user id
GET         /api/reviews/user/:userId                            controllers.ReviewController.getByUser(userId: Long)
# get papers for reviews by user id and cond id
GET         /api/reviews/papers/user/:uid/conference/:cid        controllers.ReviewController.getPaperReviewsByUserAndConf(uid:Long, cid: Long)
# get reviews by user id and cond id
GET         /api/reviews/user/:uid/conference/:cid               controllers.ReviewController.getReviewsByUserAndConf(uid:Long, cid: Long)
# update review
POST        /api/reviews/:id                                     controllers.ReviewController.update(id: Long)

## Conferences
# create
POST        /api/conferences                                     controllers.ConferenceController.create()
# update
POST        /api/conferences/:id                                 controllers.ConferenceController.update(id: Long)
# get one
GET         /api/conferences/:id                                 controllers.ConferenceController.getById(id: Long)
# get all conferences
GET         /api/conferences                                     controllers.ConferenceController.getAllConferences()
# get all conferences by keyword
GET         /api/conferencessearch                               controllers.ConferenceController.getAllConferencesByKeyword(keyword: java.lang.String, conf_status: java.lang.String)
# get conferences for user_id
GET         /api/conferences/user/:id                            controllers.ConferenceController.getConferencesByUser(id: Long)
#
GET         /api/conferences/reviewers/assigned/:userId          controllers.ConferenceController.getWithAssignedReviewer(userId: Long)
# get pc members for conference id
GET         /api/conferences/pcmembers/:conf_id                  controllers.ConferenceController.getPCMembers(conf_id: Long)
# add a pc member to conference id
POST         /api/conferences/pcmembers/:conf_id                 controllers.ConferenceController.addPCMember(conf_id: Long)
# delete a pc member by id
POST         /api/conferences/pcmembers/delete/:id               controllers.ConferenceController.deletePCMember(id: Long)
#get email templates by conference id
GET         /api/conferences/templates/:conf_id                  controllers.ConferenceController.getEmailTemplates(conf_id: Long)
# edit email template by id
POST         /api/conferences/templates/:conf_id/:id             controllers.ConferenceController.updateEmailTemplate(conf_id: Long, id: Long)
# Add review question
POST         /api/conferences/reviewquestion/:conf_id            controllers.ConferenceController.addReviewQuestion(conf_id: Long)
# Edit review question
POST         /api/conferences/reviewquestion/update/:id          controllers.ConferenceController.updateReviewQuestion(id: Long)
# Delete review question
POST         /api/conferences/reviewquestion/delete/:id          controllers.ConferenceController.deleteReviewQuestion(id: Long)
# Get review questions
GET          /api/conferences/reviewquestion/:conf_id            controllers.ConferenceController.getReviewQuestion(conf_id: Long)